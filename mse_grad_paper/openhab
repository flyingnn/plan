openHAB主要做了三件事情
1) 物理设备的虚拟化
真实世界中，硬件设备的种类是无穷的，因此，如何对硬件设备进行抽象是任何智能家居必须解决的问题。openHAB提供了一套对硬件设备进行抽象的规范，使得openHAB只需要关注基于该规范的虚拟设备即可。
2) 虚拟设备控制
内置了基于Web、从前端的图形用户界面展示到后端的虚拟设备交互
3) 事件总线
openHAB可以将用户通过图形用户界面发出的虚拟设备控制命令发布到事件总线上，也可以接收事总线上的虚拟设备状态更新事件并及时刷新图形用户界面上的虚拟设备状态展示

openHAB自己并不实现对物理硬件的控制，而是将这个工作留给开发者来完成。简单来说就是，开发者需要开发驱动程序，该驱动程序可以从openHAB事件总线获得用户对虚拟设备发出的控制指令，然后自行完成对物理硬件的控制，并且向openHAB事件总线发布虚拟设备状态更新事件。



1) DesignerX客户端
    智能家居控制系统在启动时需要从配置文件中获取设备信息和设备控制界面信息，而设备信息的配置文件和设备控制界面信息的配置文件都具有比较复杂的语法规则。为了方便普通用户编辑设备信息和设备控制界面信息，需要开发一款纯图形化操作的客户端，使得用户通过图形化操作即可对设备信息和设备控制界面信息进行管理，而不需要再去学习配置文件相关的语法规则。
2) Arduino微控制器硬件编程
    Arduino微控制器是本项目选择的目标硬件平台，具有价格低廉、配件丰富、开源开放、社区活跃的优点。本项目基于Arduino硬件平台，开发了具有一定实用性、硬件编程也不是过于复杂的硬件端的服务，主要是基于以太网的LED灯控功能和温度传感器结果查询功能。
3) ArduinoBinding



代码量统计
ArduinoBinding: 500
DesignerX: 70005

单元测试结果表明系统的基础组件得到了正确的实现。功能测试结果表明DesignerX工具方便了普通用户对设备和设备地图进行管理，而控制系统也满足了第三章提出的结合Arduino硬件平台实现LED灯控和展现环境中当前温度的需求。系统同时也满足了硬件成本、可扩展性和可移植性等非功能性需求。

设计和实现这样一款智能家居控制系统，该系统应当是体系结构中立的，即并不捆绑到任何具体的硬件平台上。同时，系统要便于开发者增强其功能从而使得系统能够支持新的硬件平台。此外，为了兼顾硬件的成本和功能，本文需要选择一个低价灵活的硬件平台作为目标硬件平台，然后为系统增加对该硬件平台的支持。最后，本文需要实现一些典型而简单的功能来验证整个方案的可行性，例如LED灯控、温度展示与更新。
